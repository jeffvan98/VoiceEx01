# coding: utf-8

"""
    Speech Services API version 2024-11-15

    Speech Services API version 2024-11-15.  # noqa: E501

    OpenAPI spec version: 2024-11-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TranscribeDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locales': 'list[str]',
        'models': 'dict(str, str)',
        'profanity_filter_mode': 'ProfanityFilterMode',
        'diarization': 'TranscribeDiarizationProperties',
        'channels': 'list[int]'
    }

    attribute_map = {
        'locales': 'locales',
        'models': 'models',
        'profanity_filter_mode': 'profanityFilterMode',
        'diarization': 'diarization',
        'channels': 'channels'
    }

    def __init__(self, locales=None, models=None, profanity_filter_mode=None, diarization=None, channels=None, _configuration=None):  # noqa: E501
        """TranscribeDefinition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._locales = None
        self._models = None
        self._profanity_filter_mode = None
        self._diarization = None
        self._channels = None
        self.discriminator = None

        if locales is not None:
            self.locales = locales
        if models is not None:
            self.models = models
        if profanity_filter_mode is not None:
            self.profanity_filter_mode = profanity_filter_mode
        if diarization is not None:
            self.diarization = diarization
        if channels is not None:
            self.channels = channels

    @property
    def locales(self):
        """Gets the locales of this TranscribeDefinition.  # noqa: E501

        A list of possible locales for the transcription. If not specified, the locale of the speech in the audio is detected automatically from all supported locales.  # noqa: E501

        :return: The locales of this TranscribeDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._locales

    @locales.setter
    def locales(self, locales):
        """Sets the locales of this TranscribeDefinition.

        A list of possible locales for the transcription. If not specified, the locale of the speech in the audio is detected automatically from all supported locales.  # noqa: E501

        :param locales: The locales of this TranscribeDefinition.  # noqa: E501
        :type: list[str]
        """

        self._locales = locales

    @property
    def models(self):
        """Gets the models of this TranscribeDefinition.  # noqa: E501

        Maps some or all candidate locales to a model URI to be used for transcription. If no mapping is given, the default model for the locale is used.  # noqa: E501

        :return: The models of this TranscribeDefinition.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this TranscribeDefinition.

        Maps some or all candidate locales to a model URI to be used for transcription. If no mapping is given, the default model for the locale is used.  # noqa: E501

        :param models: The models of this TranscribeDefinition.  # noqa: E501
        :type: dict(str, str)
        """

        self._models = models

    @property
    def profanity_filter_mode(self):
        """Gets the profanity_filter_mode of this TranscribeDefinition.  # noqa: E501


        :return: The profanity_filter_mode of this TranscribeDefinition.  # noqa: E501
        :rtype: ProfanityFilterMode
        """
        return self._profanity_filter_mode

    @profanity_filter_mode.setter
    def profanity_filter_mode(self, profanity_filter_mode):
        """Sets the profanity_filter_mode of this TranscribeDefinition.


        :param profanity_filter_mode: The profanity_filter_mode of this TranscribeDefinition.  # noqa: E501
        :type: ProfanityFilterMode
        """

        self._profanity_filter_mode = profanity_filter_mode

    @property
    def diarization(self):
        """Gets the diarization of this TranscribeDefinition.  # noqa: E501


        :return: The diarization of this TranscribeDefinition.  # noqa: E501
        :rtype: TranscribeDiarizationProperties
        """
        return self._diarization

    @diarization.setter
    def diarization(self, diarization):
        """Sets the diarization of this TranscribeDefinition.


        :param diarization: The diarization of this TranscribeDefinition.  # noqa: E501
        :type: TranscribeDiarizationProperties
        """

        self._diarization = diarization

    @property
    def channels(self):
        """Gets the channels of this TranscribeDefinition.  # noqa: E501

        The 0-based indices of the channels to be transcribed separately. If not specified, multiple channels are merged and transcribed jointly. Only up to two channels are supported.  # noqa: E501

        :return: The channels of this TranscribeDefinition.  # noqa: E501
        :rtype: list[int]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this TranscribeDefinition.

        The 0-based indices of the channels to be transcribed separately. If not specified, multiple channels are merged and transcribed jointly. Only up to two channels are supported.  # noqa: E501

        :param channels: The channels of this TranscribeDefinition.  # noqa: E501
        :type: list[int]
        """

        self._channels = channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TranscribeDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranscribeDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TranscribeDefinition):
            return True

        return self.to_dict() != other.to_dict()
