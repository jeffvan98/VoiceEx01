# coding: utf-8

"""
    Speech Services API version 2024-11-15

    Speech Services API version 2024-11-15.  # noqa: E501

    OpenAPI spec version: 2024-11-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TranscribeResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration_milliseconds': 'int',
        'combined_phrases': 'list[ChannelCombinedPhrases]',
        'phrases': 'list[Phrase]'
    }

    attribute_map = {
        'duration_milliseconds': 'durationMilliseconds',
        'combined_phrases': 'combinedPhrases',
        'phrases': 'phrases'
    }

    def __init__(self, duration_milliseconds=None, combined_phrases=None, phrases=None, _configuration=None):  # noqa: E501
        """TranscribeResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._duration_milliseconds = None
        self._combined_phrases = None
        self._phrases = None
        self.discriminator = None

        self.duration_milliseconds = duration_milliseconds
        self.combined_phrases = combined_phrases
        self.phrases = phrases

    @property
    def duration_milliseconds(self):
        """Gets the duration_milliseconds of this TranscribeResult.  # noqa: E501

        The duration of the audio in milliseconds.  # noqa: E501

        :return: The duration_milliseconds of this TranscribeResult.  # noqa: E501
        :rtype: int
        """
        return self._duration_milliseconds

    @duration_milliseconds.setter
    def duration_milliseconds(self, duration_milliseconds):
        """Sets the duration_milliseconds of this TranscribeResult.

        The duration of the audio in milliseconds.  # noqa: E501

        :param duration_milliseconds: The duration_milliseconds of this TranscribeResult.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and duration_milliseconds is None:
            raise ValueError("Invalid value for `duration_milliseconds`, must not be `None`")  # noqa: E501

        self._duration_milliseconds = duration_milliseconds

    @property
    def combined_phrases(self):
        """Gets the combined_phrases of this TranscribeResult.  # noqa: E501

        The full transcript for each channel.  # noqa: E501

        :return: The combined_phrases of this TranscribeResult.  # noqa: E501
        :rtype: list[ChannelCombinedPhrases]
        """
        return self._combined_phrases

    @combined_phrases.setter
    def combined_phrases(self, combined_phrases):
        """Sets the combined_phrases of this TranscribeResult.

        The full transcript for each channel.  # noqa: E501

        :param combined_phrases: The combined_phrases of this TranscribeResult.  # noqa: E501
        :type: list[ChannelCombinedPhrases]
        """
        if self._configuration.client_side_validation and combined_phrases is None:
            raise ValueError("Invalid value for `combined_phrases`, must not be `None`")  # noqa: E501

        self._combined_phrases = combined_phrases

    @property
    def phrases(self):
        """Gets the phrases of this TranscribeResult.  # noqa: E501

        The transcription results segmented into phrases.  # noqa: E501

        :return: The phrases of this TranscribeResult.  # noqa: E501
        :rtype: list[Phrase]
        """
        return self._phrases

    @phrases.setter
    def phrases(self, phrases):
        """Sets the phrases of this TranscribeResult.

        The transcription results segmented into phrases.  # noqa: E501

        :param phrases: The phrases of this TranscribeResult.  # noqa: E501
        :type: list[Phrase]
        """
        if self._configuration.client_side_validation and phrases is None:
            raise ValueError("Invalid value for `phrases`, must not be `None`")  # noqa: E501

        self._phrases = phrases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TranscribeResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranscribeResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TranscribeResult):
            return True

        return self.to_dict() != other.to_dict()
