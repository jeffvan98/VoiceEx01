# coding: utf-8

"""
    Speech Services API version 2024-11-15

    Speech Services API version 2024-11-15.  # noqa: E501

    OpenAPI spec version: 2024-11-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TranscriptionProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'word_level_timestamps_enabled': 'bool',
        'display_form_word_level_timestamps_enabled': 'bool',
        'channels': 'list[int]',
        'punctuation_mode': 'PunctuationMode',
        'profanity_filter_mode': 'ProfanityFilterMode',
        'destination_container_url': 'str',
        'time_to_live_hours': 'int',
        'language_identification': 'LanguageIdentificationProperties',
        'diarization': 'DiarizationProperties',
        'error': 'EntityError',
        'duration_milliseconds': 'int'
    }

    attribute_map = {
        'word_level_timestamps_enabled': 'wordLevelTimestampsEnabled',
        'display_form_word_level_timestamps_enabled': 'displayFormWordLevelTimestampsEnabled',
        'channels': 'channels',
        'punctuation_mode': 'punctuationMode',
        'profanity_filter_mode': 'profanityFilterMode',
        'destination_container_url': 'destinationContainerUrl',
        'time_to_live_hours': 'timeToLiveHours',
        'language_identification': 'languageIdentification',
        'diarization': 'diarization',
        'error': 'error',
        'duration_milliseconds': 'durationMilliseconds'
    }

    def __init__(self, word_level_timestamps_enabled=None, display_form_word_level_timestamps_enabled=None, channels=None, punctuation_mode=None, profanity_filter_mode=None, destination_container_url=None, time_to_live_hours=None, language_identification=None, diarization=None, error=None, duration_milliseconds=0, _configuration=None):  # noqa: E501
        """TranscriptionProperties - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._word_level_timestamps_enabled = None
        self._display_form_word_level_timestamps_enabled = None
        self._channels = None
        self._punctuation_mode = None
        self._profanity_filter_mode = None
        self._destination_container_url = None
        self._time_to_live_hours = None
        self._language_identification = None
        self._diarization = None
        self._error = None
        self._duration_milliseconds = None
        self.discriminator = None

        if word_level_timestamps_enabled is not None:
            self.word_level_timestamps_enabled = word_level_timestamps_enabled
        if display_form_word_level_timestamps_enabled is not None:
            self.display_form_word_level_timestamps_enabled = display_form_word_level_timestamps_enabled
        if channels is not None:
            self.channels = channels
        if punctuation_mode is not None:
            self.punctuation_mode = punctuation_mode
        if profanity_filter_mode is not None:
            self.profanity_filter_mode = profanity_filter_mode
        if destination_container_url is not None:
            self.destination_container_url = destination_container_url
        self.time_to_live_hours = time_to_live_hours
        if language_identification is not None:
            self.language_identification = language_identification
        if diarization is not None:
            self.diarization = diarization
        if error is not None:
            self.error = error
        if duration_milliseconds is not None:
            self.duration_milliseconds = duration_milliseconds

    @property
    def word_level_timestamps_enabled(self):
        """Gets the word_level_timestamps_enabled of this TranscriptionProperties.  # noqa: E501

        A value indicating whether word level timestamps are requested. The default value is `false`.  # noqa: E501

        :return: The word_level_timestamps_enabled of this TranscriptionProperties.  # noqa: E501
        :rtype: bool
        """
        return self._word_level_timestamps_enabled

    @word_level_timestamps_enabled.setter
    def word_level_timestamps_enabled(self, word_level_timestamps_enabled):
        """Sets the word_level_timestamps_enabled of this TranscriptionProperties.

        A value indicating whether word level timestamps are requested. The default value is `false`.  # noqa: E501

        :param word_level_timestamps_enabled: The word_level_timestamps_enabled of this TranscriptionProperties.  # noqa: E501
        :type: bool
        """

        self._word_level_timestamps_enabled = word_level_timestamps_enabled

    @property
    def display_form_word_level_timestamps_enabled(self):
        """Gets the display_form_word_level_timestamps_enabled of this TranscriptionProperties.  # noqa: E501

        A value indicating whether word level timestamps for the display form are requested. The default value is `false`.  # noqa: E501

        :return: The display_form_word_level_timestamps_enabled of this TranscriptionProperties.  # noqa: E501
        :rtype: bool
        """
        return self._display_form_word_level_timestamps_enabled

    @display_form_word_level_timestamps_enabled.setter
    def display_form_word_level_timestamps_enabled(self, display_form_word_level_timestamps_enabled):
        """Sets the display_form_word_level_timestamps_enabled of this TranscriptionProperties.

        A value indicating whether word level timestamps for the display form are requested. The default value is `false`.  # noqa: E501

        :param display_form_word_level_timestamps_enabled: The display_form_word_level_timestamps_enabled of this TranscriptionProperties.  # noqa: E501
        :type: bool
        """

        self._display_form_word_level_timestamps_enabled = display_form_word_level_timestamps_enabled

    @property
    def channels(self):
        """Gets the channels of this TranscriptionProperties.  # noqa: E501

        A collection of the requested channel numbers. In the default case, the channels 0 and 1 are considered.  # noqa: E501

        :return: The channels of this TranscriptionProperties.  # noqa: E501
        :rtype: list[int]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this TranscriptionProperties.

        A collection of the requested channel numbers. In the default case, the channels 0 and 1 are considered.  # noqa: E501

        :param channels: The channels of this TranscriptionProperties.  # noqa: E501
        :type: list[int]
        """

        self._channels = channels

    @property
    def punctuation_mode(self):
        """Gets the punctuation_mode of this TranscriptionProperties.  # noqa: E501


        :return: The punctuation_mode of this TranscriptionProperties.  # noqa: E501
        :rtype: PunctuationMode
        """
        return self._punctuation_mode

    @punctuation_mode.setter
    def punctuation_mode(self, punctuation_mode):
        """Sets the punctuation_mode of this TranscriptionProperties.


        :param punctuation_mode: The punctuation_mode of this TranscriptionProperties.  # noqa: E501
        :type: PunctuationMode
        """

        self._punctuation_mode = punctuation_mode

    @property
    def profanity_filter_mode(self):
        """Gets the profanity_filter_mode of this TranscriptionProperties.  # noqa: E501


        :return: The profanity_filter_mode of this TranscriptionProperties.  # noqa: E501
        :rtype: ProfanityFilterMode
        """
        return self._profanity_filter_mode

    @profanity_filter_mode.setter
    def profanity_filter_mode(self, profanity_filter_mode):
        """Sets the profanity_filter_mode of this TranscriptionProperties.


        :param profanity_filter_mode: The profanity_filter_mode of this TranscriptionProperties.  # noqa: E501
        :type: ProfanityFilterMode
        """

        self._profanity_filter_mode = profanity_filter_mode

    @property
    def destination_container_url(self):
        """Gets the destination_container_url of this TranscriptionProperties.  # noqa: E501

        The requested destination container. ### Remarks ### When a destination container is used in combination with a `timeToLive`, the metadata of a transcription will be deleted normally, but the data stored in the destination container, including transcription results, will remain untouched, because no delete permissions are required for this container.  To support automatic cleanup, either configure blob lifetimes on the container, or use \"Bring your own Storage (BYOS)\" instead of `destinationContainerUrl`, where blobs can be cleaned up.  # noqa: E501

        :return: The destination_container_url of this TranscriptionProperties.  # noqa: E501
        :rtype: str
        """
        return self._destination_container_url

    @destination_container_url.setter
    def destination_container_url(self, destination_container_url):
        """Sets the destination_container_url of this TranscriptionProperties.

        The requested destination container. ### Remarks ### When a destination container is used in combination with a `timeToLive`, the metadata of a transcription will be deleted normally, but the data stored in the destination container, including transcription results, will remain untouched, because no delete permissions are required for this container.  To support automatic cleanup, either configure blob lifetimes on the container, or use \"Bring your own Storage (BYOS)\" instead of `destinationContainerUrl`, where blobs can be cleaned up.  # noqa: E501

        :param destination_container_url: The destination_container_url of this TranscriptionProperties.  # noqa: E501
        :type: str
        """

        self._destination_container_url = destination_container_url

    @property
    def time_to_live_hours(self):
        """Gets the time_to_live_hours of this TranscriptionProperties.  # noqa: E501

        How long the transcription will be kept in the system after it has completed. Once the transcription reaches the time to live after completion(successful or failed) it will be automatically deleted.  Note: When using BYOS (bring your own storage), the result files on the customer owned storage account will also be deleted.Use either destinationContainerUrl to specify a separate container for result files which will not be deleted when the timeToLive expires, or retrieve the result files through the API and store them as needed.  The shortest supported duration is 6 hours, the longest supported duration is 31 days. 2 days (48 hours) is the recommended default value when data is consumed directly.  # noqa: E501

        :return: The time_to_live_hours of this TranscriptionProperties.  # noqa: E501
        :rtype: int
        """
        return self._time_to_live_hours

    @time_to_live_hours.setter
    def time_to_live_hours(self, time_to_live_hours):
        """Sets the time_to_live_hours of this TranscriptionProperties.

        How long the transcription will be kept in the system after it has completed. Once the transcription reaches the time to live after completion(successful or failed) it will be automatically deleted.  Note: When using BYOS (bring your own storage), the result files on the customer owned storage account will also be deleted.Use either destinationContainerUrl to specify a separate container for result files which will not be deleted when the timeToLive expires, or retrieve the result files through the API and store them as needed.  The shortest supported duration is 6 hours, the longest supported duration is 31 days. 2 days (48 hours) is the recommended default value when data is consumed directly.  # noqa: E501

        :param time_to_live_hours: The time_to_live_hours of this TranscriptionProperties.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and time_to_live_hours is None:
            raise ValueError("Invalid value for `time_to_live_hours`, must not be `None`")  # noqa: E501

        self._time_to_live_hours = time_to_live_hours

    @property
    def language_identification(self):
        """Gets the language_identification of this TranscriptionProperties.  # noqa: E501


        :return: The language_identification of this TranscriptionProperties.  # noqa: E501
        :rtype: LanguageIdentificationProperties
        """
        return self._language_identification

    @language_identification.setter
    def language_identification(self, language_identification):
        """Sets the language_identification of this TranscriptionProperties.


        :param language_identification: The language_identification of this TranscriptionProperties.  # noqa: E501
        :type: LanguageIdentificationProperties
        """

        self._language_identification = language_identification

    @property
    def diarization(self):
        """Gets the diarization of this TranscriptionProperties.  # noqa: E501


        :return: The diarization of this TranscriptionProperties.  # noqa: E501
        :rtype: DiarizationProperties
        """
        return self._diarization

    @diarization.setter
    def diarization(self, diarization):
        """Sets the diarization of this TranscriptionProperties.


        :param diarization: The diarization of this TranscriptionProperties.  # noqa: E501
        :type: DiarizationProperties
        """

        self._diarization = diarization

    @property
    def error(self):
        """Gets the error of this TranscriptionProperties.  # noqa: E501


        :return: The error of this TranscriptionProperties.  # noqa: E501
        :rtype: EntityError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TranscriptionProperties.


        :param error: The error of this TranscriptionProperties.  # noqa: E501
        :type: EntityError
        """

        self._error = error

    @property
    def duration_milliseconds(self):
        """Gets the duration_milliseconds of this TranscriptionProperties.  # noqa: E501

        The duration in milliseconds of the transcription. Durations larger than 2^53-1 are not supported to ensure compatibility with JavaScript integers.  # noqa: E501

        :return: The duration_milliseconds of this TranscriptionProperties.  # noqa: E501
        :rtype: int
        """
        return self._duration_milliseconds

    @duration_milliseconds.setter
    def duration_milliseconds(self, duration_milliseconds):
        """Sets the duration_milliseconds of this TranscriptionProperties.

        The duration in milliseconds of the transcription. Durations larger than 2^53-1 are not supported to ensure compatibility with JavaScript integers.  # noqa: E501

        :param duration_milliseconds: The duration_milliseconds of this TranscriptionProperties.  # noqa: E501
        :type: int
        """

        self._duration_milliseconds = duration_milliseconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TranscriptionProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranscriptionProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TranscriptionProperties):
            return True

        return self.to_dict() != other.to_dict()
