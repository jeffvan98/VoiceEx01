# coding: utf-8

"""
    Speech Services API version 2024-11-15

    Speech Services API version 2024-11-15.  # noqa: E501

    OpenAPI spec version: 2024-11-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DatasetLocales(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language': 'list[str]',
        'acoustic': 'list[str]',
        'pronunciation': 'list[str]',
        'audio_files': 'list[str]',
        'language_markdown': 'list[str]',
        'output_formatting': 'list[str]'
    }

    attribute_map = {
        'language': 'Language',
        'acoustic': 'Acoustic',
        'pronunciation': 'Pronunciation',
        'audio_files': 'AudioFiles',
        'language_markdown': 'LanguageMarkdown',
        'output_formatting': 'OutputFormatting'
    }

    def __init__(self, language=None, acoustic=None, pronunciation=None, audio_files=None, language_markdown=None, output_formatting=None, _configuration=None):  # noqa: E501
        """DatasetLocales - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._language = None
        self._acoustic = None
        self._pronunciation = None
        self._audio_files = None
        self._language_markdown = None
        self._output_formatting = None
        self.discriminator = None

        if language is not None:
            self.language = language
        if acoustic is not None:
            self.acoustic = acoustic
        if pronunciation is not None:
            self.pronunciation = pronunciation
        if audio_files is not None:
            self.audio_files = audio_files
        if language_markdown is not None:
            self.language_markdown = language_markdown
        if output_formatting is not None:
            self.output_formatting = output_formatting

    @property
    def language(self):
        """Gets the language of this DatasetLocales.  # noqa: E501


        :return: The language of this DatasetLocales.  # noqa: E501
        :rtype: list[str]
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DatasetLocales.


        :param language: The language of this DatasetLocales.  # noqa: E501
        :type: list[str]
        """

        self._language = language

    @property
    def acoustic(self):
        """Gets the acoustic of this DatasetLocales.  # noqa: E501


        :return: The acoustic of this DatasetLocales.  # noqa: E501
        :rtype: list[str]
        """
        return self._acoustic

    @acoustic.setter
    def acoustic(self, acoustic):
        """Sets the acoustic of this DatasetLocales.


        :param acoustic: The acoustic of this DatasetLocales.  # noqa: E501
        :type: list[str]
        """

        self._acoustic = acoustic

    @property
    def pronunciation(self):
        """Gets the pronunciation of this DatasetLocales.  # noqa: E501


        :return: The pronunciation of this DatasetLocales.  # noqa: E501
        :rtype: list[str]
        """
        return self._pronunciation

    @pronunciation.setter
    def pronunciation(self, pronunciation):
        """Sets the pronunciation of this DatasetLocales.


        :param pronunciation: The pronunciation of this DatasetLocales.  # noqa: E501
        :type: list[str]
        """

        self._pronunciation = pronunciation

    @property
    def audio_files(self):
        """Gets the audio_files of this DatasetLocales.  # noqa: E501


        :return: The audio_files of this DatasetLocales.  # noqa: E501
        :rtype: list[str]
        """
        return self._audio_files

    @audio_files.setter
    def audio_files(self, audio_files):
        """Sets the audio_files of this DatasetLocales.


        :param audio_files: The audio_files of this DatasetLocales.  # noqa: E501
        :type: list[str]
        """

        self._audio_files = audio_files

    @property
    def language_markdown(self):
        """Gets the language_markdown of this DatasetLocales.  # noqa: E501


        :return: The language_markdown of this DatasetLocales.  # noqa: E501
        :rtype: list[str]
        """
        return self._language_markdown

    @language_markdown.setter
    def language_markdown(self, language_markdown):
        """Sets the language_markdown of this DatasetLocales.


        :param language_markdown: The language_markdown of this DatasetLocales.  # noqa: E501
        :type: list[str]
        """

        self._language_markdown = language_markdown

    @property
    def output_formatting(self):
        """Gets the output_formatting of this DatasetLocales.  # noqa: E501


        :return: The output_formatting of this DatasetLocales.  # noqa: E501
        :rtype: list[str]
        """
        return self._output_formatting

    @output_formatting.setter
    def output_formatting(self, output_formatting):
        """Sets the output_formatting of this DatasetLocales.


        :param output_formatting: The output_formatting of this DatasetLocales.  # noqa: E501
        :type: list[str]
        """

        self._output_formatting = output_formatting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatasetLocales, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetLocales):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatasetLocales):
            return True

        return self.to_dict() != other.to_dict()
