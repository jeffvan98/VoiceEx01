# coding: utf-8

"""
    Speech Services API version 2024-11-15

    Speech Services API version 2024-11-15.  # noqa: E501

    OpenAPI spec version: 2024-11-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Word(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'offset_milliseconds': 'int',
        'duration_milliseconds': 'int'
    }

    attribute_map = {
        'text': 'text',
        'offset_milliseconds': 'offsetMilliseconds',
        'duration_milliseconds': 'durationMilliseconds'
    }

    def __init__(self, text=None, offset_milliseconds=None, duration_milliseconds=None, _configuration=None):  # noqa: E501
        """Word - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._text = None
        self._offset_milliseconds = None
        self._duration_milliseconds = None
        self.discriminator = None

        self.text = text
        self.offset_milliseconds = offset_milliseconds
        self.duration_milliseconds = duration_milliseconds

    @property
    def text(self):
        """Gets the text of this Word.  # noqa: E501

        The recognized word, including punctuation.  # noqa: E501

        :return: The text of this Word.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Word.

        The recognized word, including punctuation.  # noqa: E501

        :param text: The text of this Word.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def offset_milliseconds(self):
        """Gets the offset_milliseconds of this Word.  # noqa: E501

        The start offset of the word in milliseconds.  # noqa: E501

        :return: The offset_milliseconds of this Word.  # noqa: E501
        :rtype: int
        """
        return self._offset_milliseconds

    @offset_milliseconds.setter
    def offset_milliseconds(self, offset_milliseconds):
        """Sets the offset_milliseconds of this Word.

        The start offset of the word in milliseconds.  # noqa: E501

        :param offset_milliseconds: The offset_milliseconds of this Word.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and offset_milliseconds is None:
            raise ValueError("Invalid value for `offset_milliseconds`, must not be `None`")  # noqa: E501

        self._offset_milliseconds = offset_milliseconds

    @property
    def duration_milliseconds(self):
        """Gets the duration_milliseconds of this Word.  # noqa: E501

        The duration of the word in milliseconds.  # noqa: E501

        :return: The duration_milliseconds of this Word.  # noqa: E501
        :rtype: int
        """
        return self._duration_milliseconds

    @duration_milliseconds.setter
    def duration_milliseconds(self, duration_milliseconds):
        """Sets the duration_milliseconds of this Word.

        The duration of the word in milliseconds.  # noqa: E501

        :param duration_milliseconds: The duration_milliseconds of this Word.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and duration_milliseconds is None:
            raise ValueError("Invalid value for `duration_milliseconds`, must not be `None`")  # noqa: E501

        self._duration_milliseconds = duration_milliseconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Word, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Word):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Word):
            return True

        return self.to_dict() != other.to_dict()
