# coding: utf-8

"""
    Speech Services API version 2024-11-15

    Speech Services API version 2024-11-15.  # noqa: E501

    OpenAPI spec version: 2024-11-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CustomModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_properties': 'dict(str, str)',
        'base_model': 'EntityReference',
        'datasets': 'list[EntityReference]',
        'links': 'CustomModelLinks',
        'properties': 'CustomModelProperties'
    }

    attribute_map = {
        'custom_properties': 'customProperties',
        'base_model': 'baseModel',
        'datasets': 'datasets',
        'links': 'links',
        'properties': 'properties'
    }

    def __init__(self, custom_properties=None, base_model=None, datasets=None, links=None, properties=None, _configuration=None):  # noqa: E501
        """CustomModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom_properties = None
        self._base_model = None
        self._datasets = None
        self._links = None
        self._properties = None
        self.discriminator = None

        if custom_properties is not None:
            self.custom_properties = custom_properties
        if base_model is not None:
            self.base_model = base_model
        if datasets is not None:
            self.datasets = datasets
        if links is not None:
            self.links = links
        if properties is not None:
            self.properties = properties

    @property
    def custom_properties(self):
        """Gets the custom_properties of this CustomModel.  # noqa: E501

        The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length is 256 characters and the count of allowed entries is 10.  # noqa: E501

        :return: The custom_properties of this CustomModel.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this CustomModel.

        The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length is 256 characters and the count of allowed entries is 10.  # noqa: E501

        :param custom_properties: The custom_properties of this CustomModel.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_properties = custom_properties

    @property
    def base_model(self):
        """Gets the base_model of this CustomModel.  # noqa: E501


        :return: The base_model of this CustomModel.  # noqa: E501
        :rtype: EntityReference
        """
        return self._base_model

    @base_model.setter
    def base_model(self, base_model):
        """Sets the base_model of this CustomModel.


        :param base_model: The base_model of this CustomModel.  # noqa: E501
        :type: EntityReference
        """

        self._base_model = base_model

    @property
    def datasets(self):
        """Gets the datasets of this CustomModel.  # noqa: E501

        Datasets used for adaptation.  # noqa: E501

        :return: The datasets of this CustomModel.  # noqa: E501
        :rtype: list[EntityReference]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this CustomModel.

        Datasets used for adaptation.  # noqa: E501

        :param datasets: The datasets of this CustomModel.  # noqa: E501
        :type: list[EntityReference]
        """

        self._datasets = datasets

    @property
    def links(self):
        """Gets the links of this CustomModel.  # noqa: E501


        :return: The links of this CustomModel.  # noqa: E501
        :rtype: CustomModelLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CustomModel.


        :param links: The links of this CustomModel.  # noqa: E501
        :type: CustomModelLinks
        """

        self._links = links

    @property
    def properties(self):
        """Gets the properties of this CustomModel.  # noqa: E501


        :return: The properties of this CustomModel.  # noqa: E501
        :rtype: CustomModelProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CustomModel.


        :param properties: The properties of this CustomModel.  # noqa: E501
        :type: CustomModelProperties
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomModel):
            return True

        return self.to_dict() != other.to_dict()
